// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smzy.proto

#ifndef PROTOBUF_smzy_2eproto__INCLUDED
#define PROTOBUF_smzy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_smzy_2eproto();
void protobuf_AssignDesc_smzy_2eproto();
void protobuf_ShutdownFile_smzy_2eproto();

class Head;
class Message;

// ===================================================================

class Head : public ::google::protobuf::Message {
 public:
  Head();
  virtual ~Head();

  Head(const Head& from);

  inline Head& operator=(const Head& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Head& default_instance();

  void Swap(Head* other);

  // implements Message ----------------------------------------------

  Head* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Head& from);
  void MergeFrom(const Head& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // required int32 appid = 2;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 2;
  inline ::google::protobuf::int32 appid() const;
  inline void set_appid(::google::protobuf::int32 value);

  // required int32 msgid = 3;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 3;
  inline ::google::protobuf::int32 msgid() const;
  inline void set_msgid(::google::protobuf::int32 value);

  // optional int32 sequence = 4;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 4;
  inline ::google::protobuf::int32 sequence() const;
  inline void set_sequence(::google::protobuf::int32 value);

  // optional int32 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional int32 retcode = 6;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  inline ::google::protobuf::int32 retcode() const;
  inline void set_retcode(::google::protobuf::int32 value);

  // optional string extra = 7;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 7;
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const char* value, size_t size);
  inline ::std::string* mutable_extra();
  inline ::std::string* release_extra();
  inline void set_allocated_extra(::std::string* extra);

  // optional string router = 8;
  inline bool has_router() const;
  inline void clear_router();
  static const int kRouterFieldNumber = 8;
  inline const ::std::string& router() const;
  inline void set_router(const ::std::string& value);
  inline void set_router(const char* value);
  inline void set_router(const char* value, size_t size);
  inline ::std::string* mutable_router();
  inline ::std::string* release_router();
  inline void set_allocated_router(::std::string* router);

  // @@protoc_insertion_point(class_scope:Head)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_extra();
  inline void clear_has_extra();
  inline void set_has_router();
  inline void clear_has_router();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 appid_;
  ::google::protobuf::int32 msgid_;
  ::google::protobuf::int32 sequence_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 retcode_;
  ::std::string* extra_;
  ::std::string* router_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_smzy_2eproto();
  friend void protobuf_AssignDesc_smzy_2eproto();
  friend void protobuf_ShutdownFile_smzy_2eproto();

  void InitAsDefaultInstance();
  static Head* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Head head = 1;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 1;
  inline const ::Head& head() const;
  inline ::Head* mutable_head();
  inline ::Head* release_head();
  inline void set_allocated_head(::Head* head);

  // optional string body = 2;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 2;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:Message)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Head* head_;
  ::std::string* body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_smzy_2eproto();
  friend void protobuf_AssignDesc_smzy_2eproto();
  friend void protobuf_ShutdownFile_smzy_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Head

// required int32 version = 1;
inline bool Head::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Head::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Head::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Head::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Head::version() const {
  return version_;
}
inline void Head::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// required int32 appid = 2;
inline bool Head::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Head::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Head::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Head::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 Head::appid() const {
  return appid_;
}
inline void Head::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
}

// required int32 msgid = 3;
inline bool Head::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Head::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Head::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Head::clear_msgid() {
  msgid_ = 0;
  clear_has_msgid();
}
inline ::google::protobuf::int32 Head::msgid() const {
  return msgid_;
}
inline void Head::set_msgid(::google::protobuf::int32 value) {
  set_has_msgid();
  msgid_ = value;
}

// optional int32 sequence = 4;
inline bool Head::has_sequence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Head::set_has_sequence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Head::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Head::clear_sequence() {
  sequence_ = 0;
  clear_has_sequence();
}
inline ::google::protobuf::int32 Head::sequence() const {
  return sequence_;
}
inline void Head::set_sequence(::google::protobuf::int32 value) {
  set_has_sequence();
  sequence_ = value;
}

// optional int32 timestamp = 5;
inline bool Head::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Head::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Head::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Head::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 Head::timestamp() const {
  return timestamp_;
}
inline void Head::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 retcode = 6;
inline bool Head::has_retcode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Head::set_has_retcode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Head::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Head::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google::protobuf::int32 Head::retcode() const {
  return retcode_;
}
inline void Head::set_retcode(::google::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional string extra = 7;
inline bool Head::has_extra() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Head::set_has_extra() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Head::clear_has_extra() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Head::clear_extra() {
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    extra_->clear();
  }
  clear_has_extra();
}
inline const ::std::string& Head::extra() const {
  return *extra_;
}
inline void Head::set_extra(const ::std::string& value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void Head::set_extra(const char* value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
}
inline void Head::set_extra(const char* value, size_t size) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Head::mutable_extra() {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    extra_ = new ::std::string;
  }
  return extra_;
}
inline ::std::string* Head::release_extra() {
  clear_has_extra();
  if (extra_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_;
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Head::set_allocated_extra(::std::string* extra) {
  if (extra_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_;
  }
  if (extra) {
    set_has_extra();
    extra_ = extra;
  } else {
    clear_has_extra();
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string router = 8;
inline bool Head::has_router() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Head::set_has_router() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Head::clear_has_router() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Head::clear_router() {
  if (router_ != &::google::protobuf::internal::kEmptyString) {
    router_->clear();
  }
  clear_has_router();
}
inline const ::std::string& Head::router() const {
  return *router_;
}
inline void Head::set_router(const ::std::string& value) {
  set_has_router();
  if (router_ == &::google::protobuf::internal::kEmptyString) {
    router_ = new ::std::string;
  }
  router_->assign(value);
}
inline void Head::set_router(const char* value) {
  set_has_router();
  if (router_ == &::google::protobuf::internal::kEmptyString) {
    router_ = new ::std::string;
  }
  router_->assign(value);
}
inline void Head::set_router(const char* value, size_t size) {
  set_has_router();
  if (router_ == &::google::protobuf::internal::kEmptyString) {
    router_ = new ::std::string;
  }
  router_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Head::mutable_router() {
  set_has_router();
  if (router_ == &::google::protobuf::internal::kEmptyString) {
    router_ = new ::std::string;
  }
  return router_;
}
inline ::std::string* Head::release_router() {
  clear_has_router();
  if (router_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = router_;
    router_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Head::set_allocated_router(::std::string* router) {
  if (router_ != &::google::protobuf::internal::kEmptyString) {
    delete router_;
  }
  if (router) {
    set_has_router();
    router_ = router;
  } else {
    clear_has_router();
    router_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Message

// required .Head head = 1;
inline bool Message::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_head() {
  if (head_ != NULL) head_->::Head::Clear();
  clear_has_head();
}
inline const ::Head& Message::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::Head* Message::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::Head;
  return head_;
}
inline ::Head* Message::release_head() {
  clear_has_head();
  ::Head* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Message::set_allocated_head(::Head* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional string body = 2;
inline bool Message::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& Message::body() const {
  return *body_;
}
inline void Message::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Message::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void Message::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* Message::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_smzy_2eproto__INCLUDED
