{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": ";;;;;;;AAOA,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;AAEnC,IAAM,kBAAkB,GAAG,EAAE,CAAC,KAAK,CAAC;AAChC,QAAI,EAAE,oBAAoB;AAC1B,QAAI,EAAE,gBAAW,EAAE;;AAEnB,WAAO,EAAE;AACL,cAAM,EAAE,KAAK;AACb,YAAI,EAAE,gBAAW;AACb,gBAAI,kBAAkB,CAAC,MAAM,EAAE,OAAO;AACtC,8BAAkB,CAAC,MAAM,GAAG,IAAI,CAAC;AACjC,8BAAkB,CAAC,IAAI,GAAG,IAAI,MAAM,EAAE,CAAC;SAC1C;;AAED,mBAAW,EAAE,qBAAS,KAAK,EAAE,QAAQ,EAAE;AACnC,gBAAI,aAAa,GAAG,IAAI,CAAC;AACzB,gBAAI,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM;AAC3C,kCAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC;aACnD;;AAED,yBAAa,GAAG,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAElD,gBAAI,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;AAClC,6BAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC7B;SACJ;;AAED,mBAAW,EAAE,qBAAS,KAAK,EAAE;AACzB,iBAAK,IAAI,CAAC,IAAI,kBAAkB,CAAC,IAAI,EAAE;AACnC,oBAAI,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACnC,oBAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;aACvC;AACD,mBAAO,EAAE,CAAC;SACb;;AAED,WAAG,EAAE,aAAS,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE;AACjC,gBAAI,CAAC,GAAG,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;;AAE9C,gBAAI,GAAG,GAAG,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;AACxE,eAAG,CAAC,IAAI,EAAE,CAAC;SACd;KACJ;CACJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,kBAAkB,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "/*\n * 收到Socket数据包时的消息分发模块\n * @Author: thor.liu \n * @Date: 2016-12-05 17:02:59 \n * @Last Modified by:   thor.liu \n * @Last Modified time: 2016-12-05 17:02:59 \n */\nconst FWS_MSG = require(\"FWS_MSG\");\n\nconst FSocketDistributer = cc.Class({\n    name: \"FSocketDistributer\",\n    ctor: function() {},\n\n    statics: {\n        inited: false,\n        init: function() {\n            if (FSocketDistributer.inited) return;\n            FSocketDistributer.inited = true;\n            FSocketDistributer.maps = new Object();\n        },\n\n        setMapQueue: function(msgid, category) {\n            var msgid_setting = null;\n            if (FSocketDistributer.maps[category]) {} else {\n                FSocketDistributer.maps[category] = new Array();\n            }\n\n            msgid_setting = FSocketDistributer.maps[category];\n\n            if (msgid_setting.indexOf(msgid) < 0) {\n                msgid_setting.push(msgid);\n            }\n        },\n\n        getMapQueue: function(msgid) {\n            for (var c in FSocketDistributer.maps) {\n                var a = FSocketDistributer.maps[c];\n                if (a.indexOf(msgid) >= 0) return c;\n            }\n            return \"\";\n        },\n\n        put: function(msgid, sn, body, head) {\n            var c = FSocketDistributer.getMapQueue(msgid);\n\n            var msg = FWS_MSG.FWSMessageFactory.socketOnReceive(c, msgid, sn, body);\n            msg.send();\n        }\n    }\n});\n\nmodule.exports = FSocketDistributer;"
  ]
}