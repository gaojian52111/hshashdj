{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAI,WAAW,CAAC;;AAEhB,WAAW,GAAC,EAAE,CAAC,KAAK,CAAC;AACjB,iBAAS,EAAE,CAAC,SAAS;;;;;;;AAOjB,iBAAW,EAAC,qBAAS,OAAO,EAAC,OAAO,EAAC;;AAEjC,gBAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AAClD,gBAAI,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACzC,mBAAO,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;OAC9B;;;;;;;AAOD,cAAQ,EAAC,kBAAS,OAAO,EAAC,OAAO,EAAc;gBAAb,MAAM,yDAAC,KAAK;;AAC1C,gBAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;AACxC,gBAAI,EAAE,GAAG,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;;AAE/B,gBAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,CAAA,AAAC,CAAC;;AAE7C,gBAAI,MAAM,EACV;AACC,mBAAC,IAAI,GAAG,CAAC;AACT,mBAAC,IAAI,GAAG,CAAC;AACT,mBAAC,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;AACjB,mBAAC,GAAG,CAAC,GAAG,GAAG,CAAC;aACZ;AACD,mBAAO,CAAC,CAAC;OACH;;;;;;;;AAQA,iBAAW,EAAC,qBAAS,MAAM,EAAC,KAAK,EAAC,QAAQ,EAAC;AACxC,gBAAI,CAAC,GAAG,KAAK,IAAI,GAAG,GAAG,IAAI,CAAC,EAAE,CAAA,AAAC,CAAC;AACzC,gBAAI,EAAE,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAChC,gBAAI,EAAE,GAAG,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;AAEhC,mBAAQ,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;OACpC;CACT,CAAC,CAAC;AACH,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "var MathUtility;\n\nMathUtility=cc.Class({\n    extends: cc.Component,\n    \t/// <summary>\n\t\t/// 计算两点的距离\n\t\t/// </summary>\n\t\t/// <param name=\"p1\"></param>\n\t\t/// <param name=\"p2\"></param>\n\t\t/// <returns></returns>\n        GetDistance:function(PointP1,PointP2){\n\t\t\t\n            var dx = Math.abs(PointP1.x - PointP2.x);\n\t\t\tvar dy = Math.abs(PointP1.y - PointP2.y);\n\t\t\treturn Math.sqrt(dx * dx + dy * dy);\n        },\n        /// <summary>\n\t\t/// 计算两点的角度\n\t\t/// </summary>\n\t\t/// <param name=\"p1\"></param>\n\t\t/// <param name=\"p2\"></param>\n\t\t/// <returns></returns>\n        GetAngle:function(PointP1,PointP2,use360=false){\n            var dx = PointP2.y - PointP1.y;\n\t\t\tvar dy = PointP2.x - PointP1.x;\n\n\t\t\tvar r = Math.atan2(dy, dx) * (180 / Math.PI);\n\n\t\t\tif (use360)\n\t\t\t{\n\t\t\t\tr += 360;\n\t\t\t\tr %= 360;\n\t\t\t\tr = 360 - r + 90;\n\t\t\t\tr = r % 360;\n\t\t\t}\n\t\t\treturn r;\n        },\n        \t\t/// <summary>\n\t\t/// 根据一个点,角度和长度计算最终的位置\n\t\t/// </summary>\n\t\t/// <param name=\"p\"></param>\n\t\t/// <param name=\"angle\"></param>\n\t\t/// <param name=\"distance\"></param>\n\t\t/// <returns></returns>\n         GetPosition:function(PointP,angle,distance){\n            var a = angle / (180 / Math.PI);\n\t\t\tvar cx = distance * Math.cos(a);\n\t\t\tvar cy = distance * Math.sin(a);\n\n\t\t\treturn  cc.p(PointP.x + cx, PointP.y + cy);\n         },\t\n});\nmodule.exports = MathUtility;"
  ]
}