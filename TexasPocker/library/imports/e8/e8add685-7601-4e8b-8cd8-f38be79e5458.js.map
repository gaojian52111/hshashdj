{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,IAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC/B,IAAM,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC3C,IAAM,oBAAoB,GAAG,EAAE,CAAC,KAAK,CAAC;AAClC,eAAS,GAAG,CAAC,kBAAkB;;AAE/B,kBAAc,EAAE,wBAAS,KAAK,EAAE,OAAO,EAAC;AACpC,YAAG,IAAI,CAAC,YAAY,EAAE,EAAE,MACxB;AACI,gBAAI,CAAC,YAAY,GAAG,IAAI,MAAM,EAAE,CAAC;SACpC;;AAED,YAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAC3B;AACI,eAAG,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;SAC3D;;AAED,YAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;KACtC;;AAED,oBAAgB,EAAE,0BAAS,IAAI,EAAC;AAC5B,YAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AACvB,YAAG,IAAI,CAAC,YAAY,EACpB;AACI,gBAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAC3B;AACI,oBAAI,KAAK,GAAG,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;AAC9C,mBAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,mBAAmB,EAAE,WAAW,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;AACrF,oBAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;;AAE/B,uBAAO,IAAI,CAAC;aACf;SACJ;;AAED,eAAO,KAAK,CAAC;KAChB;;AAED,gBAAY,EAAE,wBAAW,EAExB;;AAED,8BAA0B,EAAE,oCAAS,GAAG,EAAE;;AAEtC,YAAG,IAAI,CAAC,iBAAiB,EAAE,EAAE,MAAK;AAC9B,gBAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AAC9B,gBAAI,CAAC,YAAY,EAAE,CAAC;SACvB;;AAED,YAAI,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,YAAG,OAAO,EACV;AACI,eAAG,CAAC,QAAQ,EAAE,CAAC;SAClB;KACJ;;AAED,cAAU,EAAE,sBAAW;AACnB,YAAI,CAAC,GAAG,WAAW,CAAC;AACpB,eAAO,IAAI,CAAC,EAAE,CAAC;KAClB;;AAED,YAAQ,EAAE,kBAAS,IAAI,EAAE;;;KAGxB;CACJ,CAAC,CAAC;;AAEH,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "const MVC = require(\"FWS_MVC\");\nconst FSocketPack = require(\"FSocketPack\");\nconst FSocketModelAbstract = cc.Class({\n    extends: MVC.FMessageConnection,\n\n    addPackHandler: function(msgid, handler){\n        if(this.packHandlers) {} else\n        {\n            this.packHandlers = new Object();\n        }\n\n        if(this.packHandlers[msgid])\n        {\n            MVC.FLog.warn(\"SocketModel\", \"重复的数据包处理函数 = {0}\", msgid);\n        }\n\n        this.packHandlers[msgid] = handler;\n    },\n\n    applyPackHandler: function(pack){\n        var msgid = pack.msgid;\n        if(this.packHandlers)\n        {\n            if(this.packHandlers[msgid])\n            {\n                var apiId = FSocketPack.getHeaderMsgId(msgid);\n                MVC.FLog.info(\"Socket\", \"处理数据包 = {0} ({1})\", FSocketPack.getMsgIdDesc(msgid), apiId);\n                this.packHandlers[msgid](pack);\n\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    initHandlers: function() {\n\n    },\n\n    onFMessage_socketOnReceive: function(msg) {\n\n        if(this._handlers_inited_) {} else{\n            this._handlers_inited_ = true;\n            this.initHandlers();\n        }\n        \n        var handled = this.applyPackHandler(msg.args.pack);\n        if(handled)\n        {\n            msg.complete();\n        }\n    },\n\n    createPack: function() {\n        var c = FSocketPack;\n        return new c();\n    },\n\n    sendPack: function(pack) {\n\n        //TODO: 发送数据包\n    }\n});\n\nmodule.exports = FSocketModelAbstract;"
  ]
}